From 77f37d7c79e93702ce6bc34d500f42856cad0232 Mon Sep 17 00:00:00 2001
From: Gerit Wagner <gerit.wagner@uni-bamberg.de>
Date: Mon, 30 Sep 2024 08:53:21 +0200
Subject: [PATCH] use logger

---
 colrev/ui_cli/cli.py | 172 +++++++++++++++++++++----------------------
 1 file changed, 86 insertions(+), 86 deletions(-)

diff --git a/colrev/ui_cli/cli.py b/colrev/ui_cli/cli.py
index 385e10a1..68994522 100644
--- a/colrev/ui_cli/cli.py
+++ b/colrev/ui_cli/cli.py
@@ -87,7 +87,7 @@ def _add_endpoint_interactively(add: str, endpoint_type: EndpointType) -> str:
     endpoint = answers["package"]
 
     if not PACKAGE_MANAGER.is_installed(endpoint):
-        print(f"{Colors.GREEN}Install package{Colors.END}")
+        logging.info(f"{Colors.GREEN}Install package{Colors.END}")
         PACKAGE_MANAGER.install(packages=[endpoint])
 
     return endpoint
@@ -213,7 +213,7 @@ def catch_exception(func=None, *, handle) -> typing.Any:  # type: ignore
         except colrev_exceptions.CoLRevException as exc:
             if kwargs.get("verbose", False):
                 raise exc
-            print(exc)
+            logging.info(exc)
 
     return wrapper
 
@@ -266,7 +266,7 @@ def get_review_manager(
             or "path_str" in review_manager_params
             or "skip_upgrade" in review_manager_params
         ):
-            print("init review manager object ...")
+            logging.info("init review manager object ...")
             review_manager = colrev.review_manager.ReviewManager(
                 **review_manager_params
             )
@@ -293,11 +293,11 @@ def shell(
     """Starts a interactive terminal"""
     from prompt_toolkit.history import FileHistory
 
-    print(f"CoLRev version {colrev.__version__}")
-    print("Workflow: status > OPERATION > validate")
-    print("https://colrev-environment.github.io/colrev/")
-    print("Type exit to close the shell")
-    print()
+    logging.info(f"CoLRev version {colrev.__version__}")
+    logging.info("Workflow: status > OPERATION > validate")
+    logging.info("https://colrev-environment.github.io/colrev/")
+    logging.info("Type exit to close the shell")
+    logging.info()
     prompt_kwargs = {"history": FileHistory(".history"), "message": "CoLRev > "}
     # pylint: disable=global-statement
     global SHELL_MODE
@@ -398,9 +398,9 @@ def status(
         colrev.ui_cli.cli_status_printer.print_project_status(status_operation)
 
     except KeyboardInterrupt:
-        print("Stopped...")
+        logging.info("Stopped...")
     except colrev_exceptions.RepoSetupError as exc:
-        print(exc)
+        logging.info(exc)
 
 
 @main.command(help_priority=100)
@@ -422,11 +422,11 @@ def dashboard(
     try:
         colrev.packages.ui_web.src.dashboard.main()
     except colrev_exceptions.NoRecordsError:
-        print("No records imported yet.")
+        logging.info("No records imported yet.")
     except colrev_exceptions.CoLRevException as exc:
         if verbose:
             raise exc
-        print(exc)
+        logging.info(exc)
 
 
 @main.command(help_priority=3)
@@ -473,7 +473,7 @@ def retrieve(
         # Note : API-based searches automatically retrieve files
         # when they are added, i.e., the following message should
         # not be shown.
-        print(
+        logging.info(
             "To retrieve search results,\n"
             " - copy files (*.bib, *.ris, *.xlsx, ...) "
             f"to the directory {review_manager.paths.SEARCH_DIR} or\n"
@@ -487,25 +487,25 @@ def retrieve(
     review_manager.logger.info(
         "Retrieve is a high-level operation consisting of search, load, prep, and dedupe:"
     )
-    print()
+    logging.info()
 
     review_manager.exact_call = "colrev search"
     search_operation = review_manager.get_search_operation()
     search_operation.add_most_likely_sources()
     search_operation.main(rerun=False)
 
-    print()
+    logging.info()
 
     review_manager.exact_call = "colrev load"
     load_operation = review_manager.get_load_operation(hide_load_explanation=True)
     load_operation.main(keep_ids=False)
 
-    print()
+    logging.info()
     review_manager.exact_call = "colrev prep"
     prep_operation = review_manager.get_prep_operation()
     prep_operation.main()
 
-    print()
+    logging.info()
 
     review_manager.exact_call = "colrev dedupe"
     dedupe_operation = review_manager.get_dedupe_operation()
@@ -598,7 +598,7 @@ def search(
 
     if view:
         for source in search_operation.sources:
-            search_operation.review_manager.p_printer.pprint(source)
+            search_operation.review_manager.p_printer.plogging.info(source)
         return
 
     if add:
@@ -631,8 +631,8 @@ def search(
         colrev.ui_cli.setup_custom_scripts.setup_custom_search_script(
             review_manager=review_manager
         )
-        print("Activated custom_search_script.py.")
-        print(
+        logging.info("Activated custom_search_script.py.")
+        logging.info(
             f"Please update the source in {review_manager.paths.SETTINGS_FILE} and commit."
         )
     elif bws:
@@ -818,8 +818,8 @@ def prep(
         prep_operation = review_manager.get_prep_operation(polish=polish, cpu=cpu)
         if setup_custom_script:
             prep_operation.setup_custom_script()
-            print("Activated custom_prep_script.py.")
-            print(
+            logging.info("Activated custom_prep_script.py.")
+            logging.info(
                 "Please check and adapt its position in the "
                 f"{review_manager.paths.SETTINGS_FILE} and commit."
             )
@@ -837,9 +837,9 @@ def prep(
         prep_operation.main(keep_ids=keep_ids)
 
     except colrev_exceptions.ServiceNotAvailableException as exc:
-        print(exc)
-        print("You can use the force mode to override")
-        print(f"  {Colors.ORANGE}colrev prep -f{Colors.END}")
+        logging.info(exc)
+        logging.info("You can use the force mode to override")
+        logging.info(f"  {Colors.ORANGE}colrev prep -f{Colors.END}")
         return
 
 
@@ -930,10 +930,10 @@ def _view_dedupe_details(dedupe_operation: colrev.ops.dedupe.Dedupe) -> None:
     info = dedupe_operation.get_info()
 
     if len(info["same_source_merges"]) > 0:
-        print(f"\n\n{Colors.RED}Same source merges to check:{Colors.END}")
-        print("\n- " + "\n- ".join(info["same_source_merges"]))
+        logging.info(f"\n\n{Colors.RED}Same source merges to check:{Colors.END}")
+        logging.info("\n- " + "\n- ".join(info["same_source_merges"]))
 
-    print(info["source_overlaps"])
+    logging.info(info["source_overlaps"])
 
 
 @main.command(help_priority=8)
@@ -1073,7 +1073,7 @@ def dedupe(
             false_positives=false_positives,
             false_negatives=false_negatives,
         )
-        print(
+        logging.info(
             "You can manually remove the duplicates_to_validate.xlsx, "
             "non_duplicates_to_validate.xlsx, and dupes.txt files."
         )
@@ -1210,7 +1210,7 @@ def prescreen(
     elif create_split:
         splits = prescreen_operation.create_prescreen_split(create_split=create_split)
         for created_split in splits:
-            print(created_split + "\n")
+            logging.info(created_split + "\n")
 
     elif include:
         prescreen_operation.include_records(ids=include)
@@ -1220,7 +1220,7 @@ def prescreen(
 
     elif setup_custom_script:
         prescreen_operation.setup_custom_script()
-        print("Activated custom_prescreen_script.py.")
+        logging.info("Activated custom_prescreen_script.py.")
     elif add:
         add = _add_endpoint_interactively(add, EndpointType.prescreen)
         colrev.ui_cli.add_package_to_settings.add_package_to_settings(
@@ -1380,11 +1380,11 @@ def screen(
     if create_split:
         splits = screen_operation.create_screen_split(create_split=create_split)
         for created_split in splits:
-            print(created_split + "\n")
+            logging.info(created_split + "\n")
         return
     if setup_custom_script:
         screen_operation.setup_custom_script()
-        print("Activated custom_screen_script.py.")
+        logging.info("Activated custom_screen_script.py.")
         return
 
     screen_operation.main(split_str=split)
@@ -1421,15 +1421,15 @@ def pdf(
         elif ret == "h":
             _print_pdf_hashes(pdf_path=Path(path))
         # elif ret == "o":
-        #     print("TODO : ocr")
+        #     logging.info("TODO : ocr")
         # elif ret == "r":
-        #     print("TODO: remove comments")
+        #     logging.info("TODO: remove comments")
         # elif ret == "m":
-        #     print("TODO : extract metadata")
+        #     logging.info("TODO : extract metadata")
         # elif ret == "t":
-        #     print("TODO : create tei")
+        #     logging.info("TODO : create tei")
         # elif ret == "i":
-        #     print("TODO: print infos (website / retracted /...)")
+        #     logging.info("TODO: print infos (website / retracted /...)")
 
 
 @main.command(help_priority=11)
@@ -1503,7 +1503,7 @@ def pdfs(
     review_manager.logger.info(
         "PDFs is a high-level operation consisting of pdf-get and pdf-prep:"
     )
-    print()
+    logging.info()
 
     pdf_get_operation = review_manager.get_pdf_get_operation(
         notify_state_transition_operation=True
@@ -1619,7 +1619,7 @@ def pdf_get(
         return
     if setup_custom_script:
         pdf_get_operation.setup_custom_script()
-        print("Activated custom_pdf_get_script.py.")
+        logging.info("Activated custom_pdf_get_script.py.")
         return
 
     pdf_get_operation.main()
@@ -1756,14 +1756,14 @@ def _print_pdf_hashes(*, pdf_path: Path) -> None:
         {Fields.FILE: pdf_path.name, Fields.ID: "NA"}, path=pdf_path.parents[0]
     )
     first_page_average_hash_16 = record.get_pdf_hash(page_nr=1, hash_size=16)
-    print(f"first page: {first_page_average_hash_16}")
+    logging.info(f"first page: {first_page_average_hash_16}")
     first_page_average_hash_32 = record.get_pdf_hash(page_nr=1, hash_size=32)
-    print(f"first page: {first_page_average_hash_32}")
+    logging.info(f"first page: {first_page_average_hash_32}")
 
     last_page_average_hash_16 = record.get_pdf_hash(page_nr=last_page_nr, hash_size=16)
-    print(f"last page: {last_page_average_hash_16}")
+    logging.info(f"last page: {last_page_average_hash_16}")
     last_page_average_hash_32 = record.get_pdf_hash(page_nr=last_page_nr, hash_size=32)
-    print(f"last page: {last_page_average_hash_32}")
+    logging.info(f"last page: {last_page_average_hash_32}")
 
 
 @main.command(help_priority=14)
@@ -1872,14 +1872,14 @@ def pdf_prep(
 
         elif setup_custom_script:
             pdf_prep_operation.setup_custom_script()
-            print("Activated custom_pdf_prep_script.py.")
+            logging.info("Activated custom_pdf_prep_script.py.")
         elif tei:
             pdf_prep_operation.generate_tei()
         else:
             pdf_prep_operation.main(batch_size=batch_size)
 
     except KeyboardInterrupt:
-        print("Stopped the process")
+        logging.info("Stopped the process")
 
 
 def _delete_first_pages_cli(
@@ -1890,7 +1890,7 @@ def _delete_first_pages_cli(
         if record_id in records:
             record_dict = records[record_id]
             if Fields.FILE in record_dict:
-                print(record_dict[Fields.FILE])
+                logging.info(record_dict[Fields.FILE])
                 pdf_path = pdf_prep_man_operation.review_manager.path / Path(
                     record_dict[Fields.FILE]
                 )
@@ -1899,7 +1899,7 @@ def _delete_first_pages_cli(
                     colrev.record.record.Record(record_dict)
                 )
             else:
-                print("no file in record")
+                logging.info("no file in record")
         if input("Extract coverpage from another PDF? (y/n)") == "n":
             break
         record_id = input("ID of next PDF for coverpage extraction:")
@@ -2090,12 +2090,12 @@ def data(
 
     if reading_heuristics:
         heuristic_results = data_operation.reading_heuristics()
-        review_manager.p_printer.pprint(heuristic_results)
+        review_manager.p_printer.plogging.info(heuristic_results)
         return
     if setup_custom_script:
         data_operation.setup_custom_script()
-        print("Activated custom_data_script.py.")
-        print(
+        logging.info("Activated custom_data_script.py.")
+        logging.info(
             f"Please update the data_format in {review_manager.paths.SETTINGS_FILE} and commit."
         )
         return
@@ -2123,7 +2123,7 @@ def data(
                     msg="Data and synthesis", manual_author=True
                 )
         if ret["no_endpoints_registered"]:
-            print(
+            logging.info(
                 "No data format not specified. "
                 "To register a data endpoint, "
                 "use one (or several) of the following \n"
@@ -2249,7 +2249,7 @@ def trace(
 def _select_target_repository(environment_registry: list) -> Path:
     while True:
         for i, local_source in enumerate(environment_registry):
-            print(
+            logging.info(
                 f"{i+1} - {local_source['repo_name']} ({local_source['repo_source_path']})"
             )
         sel_str = input("Select target repository: ")
@@ -2309,17 +2309,17 @@ def _print_environment_status(
     environment_manager = review_manager.get_environment_manager()
     environment_details = environment_manager.get_environment_details()
 
-    print("\nCoLRev environment status\n")
-    print("Index\n")
+    logging.info("\nCoLRev environment status\n")
+    logging.info("Index\n")
     if environment_details["index"]["status"] == "up":
-        print(f" - Status: {Colors.GREEN}up{Colors.END}")
-        print(f' - Path          : {environment_details["index"]["path"]}')
-        print(f' - Size          : {environment_details["index"]["size"]} records')
-        print(f' - Last modified : {environment_details["index"]["last_modified"]}')
+        logging.info(f" - Status: {Colors.GREEN}up{Colors.END}")
+        logging.info(f' - Path          : {environment_details["index"]["path"]}')
+        logging.info(f' - Size          : {environment_details["index"]["size"]} records')
+        logging.info(f' - Last modified : {environment_details["index"]["last_modified"]}')
     else:
-        print(f" - Status: {Colors.RED}down{Colors.END}")
+        logging.info(f" - Status: {Colors.RED}down{Colors.END}")
 
-    print("\nCoLRev projects\n")
+    logging.info("\nCoLRev projects\n")
     project_repos = [
         x
         for x in environment_details["local_repos"]["repos"]
@@ -2332,16 +2332,16 @@ def _print_environment_status(
                 repo_stats += " (shared, behind remote)"
             else:
                 repo_stats += " (shared)"
-        print(repo_stats)
+        logging.info(repo_stats)
 
         if -1 != colrev_repo["progress"]:
-            print(f'    - Progress : {colrev_repo["progress"]*100} %')
+            logging.info(f'    - Progress : {colrev_repo["progress"]*100} %')
         else:
-            print("    - Progress : ??")
-        print(f'    - Size     : {colrev_repo["size"]} records')
-        print(f'    - Path     : {colrev_repo["repo_source_path"]}')
+            logging.info("    - Progress : ??")
+        logging.info(f'    - Size     : {colrev_repo["size"]} records')
+        logging.info(f'    - Path     : {colrev_repo["repo_source_path"]}')
 
-    print("\nCurated CoLRev resources\n")
+    logging.info("\nCurated CoLRev resources\n")
     curated_repos = [
         x
         for x in environment_details["local_repos"]["repos"]
@@ -2354,13 +2354,13 @@ def _print_environment_status(
         )
         if colrev_repo["behind_remote"]:
             repo_stats += " (behind remote)"
-        print(repo_stats)
+        logging.info(repo_stats)
 
-    print("\n")
+    logging.info("\n")
     if len(environment_details["local_repos"]["broken_links"]) > 0:
-        print("Broken links: \n")
+        logging.info("Broken links: \n")
         for broken_link in environment_details["local_repos"]["broken_links"]:
-            print(f'- {broken_link["repo_source_path"]}')
+            logging.info(f'- {broken_link["repo_source_path"]}')
 
 
 @main.command(help_priority=20)
@@ -2428,7 +2428,7 @@ def env(
         return
 
     if index:
-        print("Index rankings")
+        logging.info("Index rankings")
         import colrev.env.local_index_builder
 
         local_index_builder = colrev.env.local_index_builder.LocalIndexBuilder(
@@ -2451,9 +2451,9 @@ def env(
     if install:
         env_resources = review_manager.get_resources()
         if env_resources.install_curated_resource(curated_resource=install):
-            print("Successfully installed curated resource.")
-            print("To make it available to other projects, run")
-            print("colrev env --index")
+            logging.info("Successfully installed curated resource.")
+            logging.info("To make it available to other projects, run")
+            logging.info("colrev env --index")
         return
 
     if pull:
@@ -2474,9 +2474,9 @@ def env(
                 )
 
                 review_manager.dataset.pull_if_repo_clean()
-                print(f"Pulled {curated_resource_path}")
+                logging.info(f"Pulled {curated_resource_path}")
             except GitCommandError as exc:
-                print(exc)
+                logging.info(exc)
         return
 
     if status:
@@ -2493,7 +2493,7 @@ def env(
 
         local_repos = environment_manager.local_repos()
         if str(unregister) not in [x["source_url"] for x in local_repos]:
-            print("Not in local registry (cannot remove): %s", unregister)
+            logging.info("Not in local registry (cannot remove): %s", unregister)
         else:
             updated_local_repos = [
                 x for x in local_repos if x["source_url"] != str(unregister)
@@ -2597,10 +2597,10 @@ def settings(
         {"verbose_mode": verbose, "force_mode": force},
     )
     if update_hooks:
-        print("Update pre-commit hooks")
+        logging.info("Update pre-commit hooks")
 
         if review_manager.dataset.has_record_changes():
-            print("Clean repo required. Commit or stash changes.")
+            logging.info("Clean repo required. Commit or stash changes.")
             return
 
         scripts_to_call = [
@@ -2616,7 +2616,7 @@ def settings(
 
         review_manager.dataset.add_changes(review_manager.paths.PRE_COMMIT_CONFIG)
         review_manager.dataset.create_commit(msg="Update pre-commit hooks")
-        print("Successfully updated pre-commit hooks")
+        logging.info("Successfully updated pre-commit hooks")
         return
 
     if update_global:
@@ -2624,7 +2624,7 @@ def settings(
 
         env_man = EnvironmentManager()
         path, value_string = update_global.split("=")
-        print(f"Updating registry settings:\n{path} = {value_string}")
+        logging.info(f"Updating registry settings:\n{path} = {value_string}")
         env_man.update_registry(path, value_string)
     if modify:
         # TBD: maybe use glom.delete?
@@ -2816,7 +2816,7 @@ def show(  # type: ignore
         colrev.ui_cli.show_printer.print_sample(review_manager=review_manager)
 
     elif keyword == "settings":
-        print(f"Settings:\n{review_manager.settings}")
+        logging.info(f"Settings:\n{review_manager.settings}")
 
     elif keyword == "cmd_history":
         cmds = []
@@ -2858,7 +2858,7 @@ def show(  # type: ignore
             except KeyError:
                 continue
         for cmd in cmds:
-            print(
+            logging.info(
                 f"{cmd['date']} ({cmd['committer']}, {cmd['commit_id']}):    "
                 f"{Colors.ORANGE}{cmd['cmd']}{Colors.END}"
             )
@@ -3079,7 +3079,7 @@ def merge(
     if not branch:
         colrev.ops.check.CheckOperation(review_manager)
         git_repo = review_manager.dataset.get_repo()
-        print(f"possible branches: {','.join([b.name for b in git_repo.heads])}")
+        logging.info(f"possible branches: {','.join([b.name for b in git_repo.heads])}")
         return
 
     merge_operation = review_manager.get_merge_operation()
@@ -3131,7 +3131,7 @@ def version(
 
     from importlib.metadata import version
 
-    print(f'colrev version {version("colrev")}')
+    logging.info(f'colrev version {version("colrev")}')
 
 
 @main.command(help_priority=34)
-- 
2.46.2

